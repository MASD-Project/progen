:properties:
:id: 3DD5C3FF-5BC2-F8A4-2A6B-4F037A78D8E6
:end:
#+title: MDE and Variability Modeling
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil toc:t html-postamble:nil
#+startup: inlineimages
#+cite_export: csl
#+bibliography: ../bibliography.bib

/[[id:11F938FF-2A01-4424-DBE3-16527251E747][Back to home page]]/

#+begin_quote
Despite their crucial importance, features are rarely modularized and there is
only little support for incremental variation of feature functionality. ---
Groher and Völter [cite:@groher2007expressing]
#+end_quote

The employment of model-driven techniques for the engineering of software
systems is often accompanied by a shift in focus from /individual/ software
products to /groups/ of products with similar characteristics. This may happen
tacitly --- because the modeling process reveals these commonalities as
abstractions (/cf./ [[id:7D92A620-ED3E-D264-46A3-2A2597C59DC7][Why Model?]]) and good software engineering practices such as
modularity and reuse create the conditions for their sharing across products ---
or by explicit design.

Whichever its origins, this type of engineering presents challenges of a
/different kind/, as Stahl /et al./ note:

#+begin_quote
[...] [[id:7FCC54A3-D2C3-0254-1C0B-103976AA8D87][MDSD]] often takes place not only as part of developing an entire
application, but in the context of creating entire product lines and software
system families. These possess very specific architectural requirements of their
own that the architects must address. [cite:@volter2013model] (p. 5)
#+end_quote

Thus, much stands to be gained by making the approach systematic, an aim often
achieved in the literature by recourse to software diversity techniques such as
variability modeling.[fn:software_diversity]

This document is organised as follows. Section [[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][Software Product Line Engineering]]
introduces the notion of /product lines/ and connects it to domain engineering.
Variability proper is then tackled ([[id:C9E5C482-E37B-AF14-4E3B-4FF92BB86C50][Variability Management and Variability
Models]]), followed by a brief introduction on feature modeling ([[id:76DC5C70-AAC0-86A4-3EEB-4187367002BA][Feature
Modeling]]). The document concludes with Section [[id:7D780B3E-2821-2674-8F4B-AE29097B739D][Integrating Feature Modeling with
MDE]], where feature modeling is then related back to the model driven approaches.

[fn:software_diversity] For a comprehensive analysis on the state of the art in
software diversity, see Schaefer /et al./ [cite:@schaefer2012software]. There,
they defined software diversity as follows: "In today’s software systems,
typically different system variants are developed simultaneously to address a
wide range of application contexts or customer requirements. This variation is
referred to as software diversity."


* Software Product Line Engineering
  :properties:
  :id: C1172AEA-F94B-73D4-FDAB-A105D7FEA389
  :custom_id: ID-C1172AEA-F94B-73D4-FDAB-A105D7FEA389
  :roam_aliases: SPLE "Domain Engineering" "Application Engineering" "Program Families"
  :end:

The idea of abstracting commonalities between sets of programs has had a long
history within computer science, starting as early as the 1970s with Dijkstra's
notion of /program families/.[fn:program_families] A modern and systematised
embodiment of Dijkstra's original insights can be found in [[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][Software Product Line
Engineering (SPLE)]] [cite:@pohl2005software] [cite:@clements2002software], which
is of particular significance to the present work because its principles and
techniques are often employed in a [[id:C29C6088-B396-A404-9183-09FE5AD2D105][MDE]] context [cite:@groher2007expressing]
[cite:@roth2015towards] [cite:@groher2009aspect].

[fn:program_families] In [cite:@dijkstra1970notes], Dijkstra states: "If a
program has to exist in two different versions, I would rather not regard (the
text of) the one program as a modification of (the text of) the other. It would
be much more attractive if the two different programs could, in some sense or
another, be viewed as, say, different children from a common ancestor, where the
ancestor represents a more or less abstract program, embodying what the two
versions have in common."


Pohl /et al./ define [[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][SPLE]] as "a paradigm to develop software applications
(software-intensive systems and software products) using [[id:6C44E7F3-4BEA-9524-810B-B1EE4EECF771][platforms]] and mass
customization." [cite:@pohl2005software] Roth and Rumpe add that "[[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][SPLE]] focuses
on identifying commonalities and variability (the ability to change or customize
a system in a predefined way) to create components that are used to develop
software products for an area of application." [cite:@roth2015towards]

The mechanics of [[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][SPLE]] bring to mind Stahl /et al./'s [[id:CA10BF3B-5F12-D0B4-5C4B-32E4B0B87BBC][dual track process]], in that
/Domain Engineering/ is used to create a set of /core assets/ and /Application
Engineering/ is applied to those core assets in order to develop a family of
related products, called a /product line/ or a system
family.[fn:domain_engineering] In this light, Domain Engineering defines the
variation space available to all products within the product line, opening up
possibilities in terms of variability, whereas the role of Application
Engineering is to create specific /configurations/ or /variants/ for each
product, reducing or eliminating variability. Figure
[[fig-variability_domain_application_engineering]] illustrates this idea.

[fn:domain_engineering] In Czarnecki's words (/emphasis his/)
[cite:@czarnecki2002domain]:

#+begin_quote
/Domain engineering/ (DE) is the systematic process of collecting, organizing,
and storing past experience in building systems in a particular domain. This
experience is captured in the form of reusable assets (/i.e./, reusable work
products), such as documents, patterns, reusable models, components, generators,
and domain-specific languages. An additional goal of DE is to provide an
infrastructure for reusing these assets (/e.g./, retrieval, qualification,
dissemination, adaptation, and assembly) during application engineering, /i.e./,
the process of building new systems. [...] Similar to the traditional
single-system software engineering, DE also encompasses the three main process
components of analysis, design, and implementation. In this context, however,
they are referred to as /domain analysis/, /domain design/, and /domain
implementation/."
#+end_quote


#+caption[Variability management in time.]: Variability management in time. /Source/: Author's drawing based on Bosch /et al./'s image [cite:@bosch2001variability]
#+name: fig-variability_domain_application_engineering
#+attr_latex: :scale 0.3
[[../assets/images/variability_domain_application_engineering.png]]

The importance of managing variability within [[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][SPLE]] cannot be overstated, nor can
the challenges of its management, as Groher and Völter make clear (/emphasis
ours/): "The effectiveness of a software product line approach directly depends
on /how well feature variability within the portfolio is managed/ from early
analysis to implementation and through maintenance and evolution."
[cite:@groher2007expressing] The central question is then how to integrate a
model-driven approach with the management of variability.

* Variability Management and Variability Models
  :properties:
  :id: C9E5C482-E37B-AF14-4E3B-4FF92BB86C50
  :custom_id: ID-C9E5C482-E37B-AF14-4E3B-4FF92BB86C50
  :end:

Like the /[[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][program families]]/ described in the previous section, variation itself
has long been a going concern in software development; but, traditionally, it
has been handled by programmatic means via techniques such as configuration
files, design patterns, frameworks and polymorphism --- that is, at a low-level
of abstraction --- and scattered across engineering
artefacts.[fn:inadequate_variability_modeling] [[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][SPLE]] promotes instead /explicit
variability management/, which Groher and Völter define as "the activity
concerned with identifying, designing, implementing, and tracing flexibility in
software product lines (SPLs)." [cite:@groher2007expressing] The idea is to
promote variability to a first-class citizen within the engineering process.

[fn:inadequate_variability_modeling] Czarnecki denounced this historically
"inadequate modeling of variability", stating that "[the] only kind of
variability modeled in current OOA/D is intra-application variability, /e.g./
variability of certain objects over time and the use of different variants of an
object at different locations within an application."


A variability management approach that resonates particularly with [[id:C29C6088-B396-A404-9183-09FE5AD2D105][MDE]] is
/variability modeling/ --- that is, the use of [[id:1D15099E-7294-6724-3343-A6C71CB05BF9][DSL]] designed for expressing
variability --- for much the same reasons [[id:C29C6088-B396-A404-9183-09FE5AD2D105][MDE]] promotes model use in general
(/cf./ [[id:7D92A620-ED3E-D264-46A3-2A2597C59DC7][Why Model?]]). Stoiber puts variability modeling in context:

#+begin_quote
[[id:76DC5C70-AAC0-86A4-3EEB-4187367002BA][SPLE]] allows maximizing the reuse of commonality (/i.e./, by developing all
products on a common product platform) and of variability (/i.e./, by a more
modular development of variable functionality that can be added to or removed
from the product more easily). This requires a variability model, though, to
support an efficient specification and development of both the software product
line as a whole and of individual application products. [cite:@stoiber2012new]
#+end_quote

The benefits alluded to by Stoiber are more clearly identified by Czarnecki,
who, in [cite:@czarnecki1998generative] (p. 68), sees three main advantages
resulting from the explicit modeling of variability:

- *Variability Abstraction*: By having a model of variability across the system
  --- "a more abstract representation", in Czarnecki's words --- it is now
  possible to reason about it independently of implementation mechanisms, which
  facilitates the work of [[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][Domain Engineering]].
- *Variability Documentation*: From the perspective of [[id:C1172AEA-F94B-73D4-FDAB-A105D7FEA389][Application Engineering]],
  the variability space is made explicit and concise, therefore simplifying
  decisions around use and reuse.
- *Variability Traceability*: Engineers can also have a better understanding of
  the inclusion or exclusion of functionality because the variability model can
  answer those questions independently of the implementation.

These benefits help explain the abundant literature on variability modeling
languages, including AND/OR Tables [cite:@muthig2004gophone], Decision Modeling
[cite:@schmid2011comparison], Orthogonal Variability Modeling (OVM)
[cite:@pohl2005software], the Common Variability Language (CVL)
[cite:@haugen2013cvl] and many more. A survey of all of these approaches lies
beyond the scope of our work, given our requirement for a small set of
high-level concepts from the variability domain. Instead, the focus shall be
narrowed to a single approach which satisfies our needs: /[[id:76DC5C70-AAC0-86A4-3EEB-4187367002BA][feature
modeling]]/.[fn:chen_variability]

[fn:chen_variability] The interested reader is directed to Chen /et al./'s
[cite:@chen2009variability] systematic literature review of 34 approaches to
variability management, which also provides a chronological background. In
addition, Sinnema and Deelstra [cite:@sinnema2007classifying] authored a broad
overview of the field, including surveys of [[id:1D15099E-7294-6724-3343-A6C71CB05BF9][DSL]] and tooling, as well
as performing a detailed analysis of six variability modeling approaches.


* Feature Modeling
  :properties:
  :id: 76DC5C70-AAC0-86A4-3EEB-4187367002BA
  :custom_id: ID-76DC5C70-AAC0-86A4-3EEB-4187367002BA
  :roam_aliases: SPLE
  :end:

Feature modeling was originally introduced by Kang /et al./'s work on FODA
(Feature-Oriented Domain Analysis) [cite:@kang1990feature] and subsequently
extended by Czarnecki and Eisenecker [cite:@czarnecki2000generative], amongst
many others.[fn:feature_orientation] As the name indicates, the concept central
to their approach is the /feature/, which Groher and Völter define in the
following manner: "[products] usually differ by the set of features they include
in order to fulfill /(sic.)/ customer requirements. A feature is defined as an
increment in functionality provided by one or more members of a product line."
[cite:@groher2009aspect] Features are thus are associated with product lines ---
each feature a cohesive unit of functionality with distinguishable
characteristics relevant to a stakeholder[fn:stakeholder] --- and the interplay
between features then becomes /itself/ a major source of variability, as Groher
and Völter go on to explain: "Variability of features often has widespread
impact on multiple artifacts in multiple lifecycle stages, making it a
pre-dominant (/sic./) engineering challenge in software product line
engineering."

[fn:feature_orientation] Feature orientation attracted interest even outside the
traditional modeling community, giving rise to approaches such as FOP
(Feature-Oriented Programming), which is "[...] the study of feature modularity
and programming models that support feature modularity."
[cite:@batory2003tutorial]

[fn:stakeholder] Note that we use the term /stakeholder/ rather than customer or
end user, taking the same view as Czarnecki /et al./
[cite:@czarnecki2005formalizing] (/emphasis ours/): "[...] we allow features
with respect to /any stakeholder/, including customers, analysts, architects,
developers, system administrators, etc. Consequently, a feature may denote /any/
functional or non-functional characteristic at the requirements, architectural,
component, platform, or any other level."


#+caption[Symbols used in cardinality-based feature modeling.]: Symbols used in cardinality-based feature modeling. /Source:/ Author's drawing, based on Czarnecki and Helsen [cite:@czarnecki2006feature]
#+name: tab-cardinality_fm
#+attr_latex: :scale 0.3
[[../assets/images/feature_modeling_symbols.png]]

Features and their relationships are captured by /feature diagrams/ and /feature
models/, as Czarnecki /et al./ tell us [cite:@czarnecki2005formalizing]: "A
feature diagram is a tree of features with the root representing a concept
(/e.g./, a software system). Feature models are feature diagrams plus additional
information such as feature descriptions, binding times, priorities,
stakeholders, /etc./" Feature diagrams have found widespread use in the
literature since their introduction, resulting on the emergence of several
different extensions and variations.[fn:feature_variations] For the purposes of
the present chapter we shall make use of cardinality-based feature models, as
described by Czarnecki /et al./ in [cite:@czarnecki2005formalizing] and whose
notation Figure [[tab-cardinality_fm]] summarises.

[fn:feature_variations] An in-depth analysis of these variants would take too
far afield with regards to the scope of the present work. The interested reader
is directed to Czarnecki /et al./ [cite:@czarnecki2005staged], Section 2.2
(Summary of Existing Extensions), where a conceptual analysis of the main
variants is provided.


The notation is perhaps made clearer by means of an example (Figure [[tab-car_fm]]),
which builds on from the example in [[id:1405A531-73F5-E094-04A3-F08451EC02BC][Metamodelling Hierarchy]]. The top-most node
of the feature diagram (/i.e./ =Car=) is called the /root feature/. Nodes
=Body=, =Engine=, =Gear= and =Licence Plate= describe mandatory features whereas
node =Keyless Entry= describes an optional feature. =Engine= contains a set of
grouped features that are part of a /xor-group/, whereas =Gear= contains a set
of features in a /or-group/. Or-groups differ from xor-groups in that they
require that at least one feature from the group needs to be selected whereas
xor-groups allow one and only one feature to be selected.

#+caption[Sample feature model.]: Sample feature model. /Source:/ Author's drawing, modified from a Czarnecki and Wasowski diagram [cite:@czarnecki2007feature].
#+name: tab-car_fm
#+attr_latex: :scale 0.3
[[../assets/images/example_feature_model.png]]

Feature diagrams have the significant property of being trivially convertible
into Boolean logic formulas or to a CNF (Conjunctive Normal Form)
representation, making them amenable to solving using established solvers such
as BDD (Binary Decision Diagram) [cite:@czarnecki2007feature] and SAT
[cite:@batory2005feature].

Importantly, feature modeling also has known shortcomings, and these were
considered during our review of the literature. Most significant were those
identified by Pohl /et al./ [cite:@pohl2005software], namely that feature models
mix the modeling of features with the modeling of variability and do not provide
a way to segment features by intended destinatary --- /i.e./ it is not possible
to distinguish between features meant for internal purposes from those meant for
end-users. With OVM, Pohl /et al./ propose instead a decomposition of
responsibilities. Clearly, there is validity to their concerns, as demonstrated
by the fact that concepts that OVM brought into attention such as /variation
points/ --- "delayed design decision[s]" [cite:@bosch2001variability] that
"[...] allow us to provide alternative implementations of functional or
non-functional features" as well as documentation --- are now commonly used in
the literature, even in the context of feature modeling. Nonetheless, since
features provide an adequate level of granularity for our needs, we need not
concern ourselves with Pohl /et al./'s criticism. We do, however, require a
clearer pictured of the relationship between feature models and the kinds of
models that are typically found within acrshort:mde.

* Integrating Feature Modeling with MDE
  :properties:
  :id: 7D780B3E-2821-2674-8F4B-AE29097B739D
  :custom_id: ID-7D780B3E-2821-2674-8F4B-AE29097B739D
  :end:

The crux of the problem is then on how to integrate ACRshortpl:mde modeling
techniques with variability management --- or, more specifically for our
purposes, with feature modeling. Clearly, having a feature model simply as a
stand-alone artefact, entirely disconnected from the remaining engineering
activities is just a form of acrshort:mbe, as Czarnecki and Antkiewicz explain
(/emphasis ours/): "Although a feature model can represent commonalities and
variabilities in a very concise taxonomic form, /features in a feature model are
merely symbols/. Mapping features to other models, such as behavioral or data
specifications, gives them semantics." [cite:@czarnecki2005mapping]

Therefore, the availability of concise and interlinked representations of
variability across models is a prerequisite to attain this semantically rich
view of features. For their part, Groher and Völter argue that integrating
variability directly within models has important advantages: "[...] due to the
fact that models are more abstract and hence less detailed than code,
variability on model level is inherently less scattered and therefore simpler to
manage." [cite:@groher2008using] (/cf./ Figure
[[fig-abstract_models_detailed_representations]]).

#+caption[ Mapping abstract models to detailed representations.]: Mapping abstract models to detailed representations. /Source:/ Author's drawing from Groher and Völter's image [cite:@groher2008using]
#+name: fig-abstract_models_detailed_representations
#+attr_latex: :scale 0.3
[[../assets/images/abstract_models_detailed_representations.png]]

Whilst delving into the conceptual machinery of this integration, Groher and
Völter [cite:@groher2007expressing] [cite:@groher2009aspect] analysed the types
of variability found in models and proposed dividing it into two kinds,
/structural/ and /non-structural/, defined as follows: "Structural variability
is described using creative construction DSLs, whereas non-structural
variability can be described using configuration languages." We name these two
kinds /input variability/ since they reflect variation within the input models.
In their view, the feature model becomes a metamodel for the product
line[fn:feature_model_as_meta_model], and their instances are the configuration
models for products, with the final aim being to "[...] use a configuration
model to define variants of a structural model." According to them, these
variants can be generated in two ways:

[fn:feature_model_as_meta_model] A view that aligns well with Czarnecki /et
al./'s idea of a feature model as the description of the set of all possible
valid configurations within a system family [cite:@czarnecki2005formalizing].


- *Positive Variability*: The assembly of the variant starts with a small core,
  and additional parts are added depending on the presence or absence of
  features in the configuration model. The core contains parts of the model that
  are used by all products in the product line.
- *Negative Variability*: The assembly process starts by first manually building
  the "overall" model with all features selected. Features are then removed
  based on their absence from the configuration model.

Since these two types of variability are related to generation, we classify them
as /generational variability/. Figure [[fig-negative_positive_variability]]
illustrates these two techniques, applied to sample features =A=, =B= and =C=.

#+caption[Positive and negative variability techniques.]: Positive and negative variability techniques. /Source:/ Author's drawing based on images from Groher and Völter [cite:@groher2009aspect]
#+name: fig-negative_positive_variability
#+attr_latex: :scale 0.3
[[../assets/images/negative_positive_variability.png]]

Given the cross-cutting nature of feature related concerns, Groher and Völter
proposed using AOP (Aspect Oriented Programming) [cite:@filman2004aspect]
techniques to implement positive and negative variability, to which they gave
the perhaps overly-descriptive name of AO-MD-PLE (Aspect-Oriented Model Driven
PLE). AO-MD-PLE has the advantage of considering all stages of software
engineering, from problem space to solution space, including models,
transformations (both [[id:93400D0B-2E1E-7244-D07B-DD8BCA98277A][M2M]] and [[id:93400D0B-2E1E-7244-D07B-DD8BCA98277A][M2T]]) and manually crafted code. In our opinion,
its main downside is complexity, not only due to challenges inherent to AOP
itself [cite:@constantinides2004aop] [cite:@steimann2006paradoxical], but also
because it uses several different tools to implement the described functionality
and, understandably, requires changes at all levels of the stack.

Undertakings of a less ambitious nature are also present in the literature. The
simplest approach is arguably to integrate variability modeling directly with
UML via a UML Profile, as suggested by Clauß's early work
[cite:@clauss2001generic], which focused on concepts such as variation points
and variants. Ziadi /et al./ [cite:@ziadi2003towards] build on from this idea,
expanding the focus to product line concepts. More recently, in
[cite:@possompes2010uml] [cite:@possompes2011design], Thibaut /et al./ created a
UML Profile for feature modeling concepts. Extending acrshort:uml is
advantageous due to its universal nature, but alas, it also inherits all of the
challenges associated with the modeling suite.

Others have looked elsewhere. In [cite:@czarnecki2005mapping], Czarnecki and
Antkiewicz propose a template-based approach to map feature models to different
kinds of models. There, they outline a technique of /superimposed variants/, in
which a /model template/ is associated with a feature model to form a /model
family/. The model template is written in the [[id:1D15099E-7294-6724-3343-A6C71CB05BF9][DSL]] of the target model, and can
be thought of as a superset of all possible models, containing model elements
that are associated with features by means of /presence conditions/. Model
templates can be instantiated given a feature configuration: "The instantiation
process is a model-to-model transformation with both the input and output
expressed in the target notation." The approach is reminiscent of Groher and
Völter's positive variability, in that the template provides the overall model
and [[id:707BD590-1E59-56B4-D333-33525E43A78A][MT]] are then responsible for pruning unwanted model elements on the basis of
the evaluation of presence conditions.

An interesting feature of superimposed variants are IPC (Implicit Presence
Conditions):

#+begin_quote
When an element has not been explicitly assigned a PC by the user, an implicit
PC (IPC) is assumed. In general, assuming a PC of true is a simple choice which
is mostly adequate in practice; however, sometimes a more useful IPC for an
element of a given type can be provided based on the presence conditions of
other elements and the syntax and semantics of the target notation.
#+end_quote

IPC facilitate the job of the modeler because they infer relationships between
features and model elements based on a deep understanding of the underlying
modeling language. For example, if two UML model elements are linked by an
association and each element has a presence condition, a possible IPC is to
remove both modeling elements if either of their presence conditions evaluates
to false. Overall, Czarnecki and Antkiewicz's approach is extremely promising,
as demonstrated by their prototype implementation, but in our opinion it hinges
largely on the availability of good tooling. Asking individual [[id:C29C6088-B396-A404-9183-09FE5AD2D105][MDE]] practitioners
to extend their tools to support superimposed variants is not feasible due to
the engineering effort required.

As part of our review of the literature we also investigated the application of
variability management techniques to code generators. In
[cite:@roth2015towards], Roth and Rumpe motivate the need for the application of
product line engineering techniques to code generation. Their paper provides a
set of conceptual mechanisms to facilitate the product-lining of code
generators, and outlines a useful set of requirements: "The main requirements
for a code generator product line infrastructure are support for incremental
code generation, specification of code generator component interfaces, support
for validation of generated code, and support for individual semantics of a
composition operator."

For their part, Greifenberg /et al./ [cite:@greifenberg2016modeling] reflected
on the role of code generators within [[id:76DC5C70-AAC0-86A4-3EEB-4187367002BA][SPLE]] --- particularly those that are
implemented as product lines /themselves/: "[...] a code generator product is a
SPL on its own, since it generates a variety of software products that are
similar, and thus shares generator components potentially in different
variants". Their work also introduces the concept of /variability regions/:

#+begin_quote
Variability regions (VRs) provide a template language independent approach to
apply concepts of FOP to code generators. A VR represents an explicitly
designated region in an artifact that has to be uniquely addressable by an
appropriate signature.
#+end_quote

Variability regions are accompanied by two [[id:1D15099E-7294-6724-3343-A6C71CB05BF9][DSL]]: LDL (Layer Definition Language)
and PCL (Product Configuration Language). The LDL is used to define
relationships between variability regions, whereas the PCL defines individual
configurations to instantiate variants. Variability regions and their modeling
is certainly an interesting idea, but it is somewhat unfortunate that
Greifenberg /et al./ did not link them back to feature models or to higher-level
modeling in general.

Finally, Jörges' [cite:@jorges2013construction] take on code generation,
modeling and product lines is arguably the most comprehensive of all those
analysed, given he advocates the development of code generators that take into
account variant management and product lines as one of its core requirements
[cite:@jorges2013construction] (p. 8). /Genesys/, the approach put forward by
Jörges in his dissertation, hinges on a service-oriented approach to the
construction and evolution of code generators, anchored on the basis of models:
"Both models and services are reusable and thus form a growing repository for
the fast creation and evolution of code generators."

Unfortunately, there were several disadvantages with his approach with regards
to own purposes; namely, the reliance on a graphical notation for the design of
code generators and, more significantly, the tool-specific nature of Genesys
which cannot be considered outside of jABC.[fn:jabc] As we have seen, these are
in direct conflict with our own views on fitting with existing developer
workflows rather than imposing new ones. Nonetheless, Jörges' work was very
influential to our own, and we've carried across several features of his
argument such as a clear outline of a set of requirements in order to guide the
model-driven solution.

[fn:jabc] As per Jörges' [cite:@jorges2013construction] (p. 43): "jABC is a
highly customizable Java-based framework that realizes the tenets of XMDD
[Extreme Model-Driven Development] [...] jABC provides a tool that allows users
to graphically develop systems in a behavior-oriented manner by means of models
called Service Logic Graphs (SLGs)."


* bibliography

#+print_bibliography:
